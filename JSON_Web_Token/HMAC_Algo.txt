why HMAC algo is used in most?
  The HS256 algorithm (HMAC-SHA256) is a popular choice for creating JSON Web Tokens (JWTs) because it offers a good balance between security, performance, and ease of use.

Here are some reasons why HS256 is commonly used:

Security: HS256 uses a symmetric key algorithm, which means that the same secret key is used to both sign and verify the JWT. This makes it less vulnerable to attacks like tampering and spoofing, as only those with the secret key can generate valid tokens.

Performance: HS256 is fast and efficient, which makes it a good choice for use cases where large numbers of tokens need to be generated and verified quickly.

Ease of use: HS256 is easy to implement and integrate with existing systems, as it only requires a shared secret key to be used for both signing and verifying JWTs. This simplicity also makes it less error-prone compared to other more complex algorithms.

That being said, the choice of algorithm for JWTs depends on the specific requirements and constraints of your application. For example, if you need to share the secret key with multiple parties or if you require greater levels of security, you may want to consider using an asymmetric algorithm like RS256 instead.

How JSON web token are digitally signed?
JSON Web Tokens (JWTs) are digitally signed using a secret key or a public/private key pair.

When a JWT is created, the payload is first encoded as a Base64Url string. Then, a signature is generated by taking the encoded header and payload along with a secret key or a private key and applying a hashing algorithm, such as HMAC SHA-256 or RSA SHA-256. The resulting hash value is then added to the JWT as a signature.

If a secret key is used for signing, the same key must be used to verify the signature. If a public/private key pair is used, the sender signs the JWT with the private key and the receiver verifies the signature using the corresponding public key.

The receiver can then decode the JWT's payload and verify its signature to ensure that the JWT has not been tampered with and originated from a trusted source. If the signature verification fails, the receiver can reject the JWT.

Digital signatures provide a way to ensure the authenticity and integrity of JWTs and are a key component of their security.